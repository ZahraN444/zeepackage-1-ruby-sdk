# swagger_petstore
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstore
  # Utility class for OAuth 2 authorization and token management.
  class PetstoreAuth < CoreLibrary::HeaderAuth
    include CoreLibrary
    # Display error message on occurrence of authentication failure.
    # @returns [String] The oAuth error message.
    def error_message
      'PetstoreAuth: OAuthToken is undefined or expired.'
    end

    # Initialization constructor.
    def initialize(petstore_auth_credentials, config)
      auth_params = {}
      @_o_auth_client_id = petstore_auth_credentials.o_auth_client_id unless
        petstore_auth_credentials.nil? || petstore_auth_credentials.o_auth_client_id.nil?
      @_o_auth_redirect_uri = petstore_auth_credentials.o_auth_redirect_uri unless
        petstore_auth_credentials.nil? || petstore_auth_credentials.o_auth_redirect_uri.nil?
      @_o_auth_token = petstore_auth_credentials.o_auth_token unless
        petstore_auth_credentials.nil? || petstore_auth_credentials.o_auth_token.nil?
      @_o_auth_scopes = petstore_auth_credentials.o_auth_scopes unless
        petstore_auth_credentials.nil? || petstore_auth_credentials.o_auth_scopes.nil?
      @_o_auth_api = OAuthAuthorizationController.new(config)
      auth_params['Authorization'] = "Bearer #{@_o_auth_token.access_token}" unless @_o_auth_token.nil?

      super auth_params
    end

    # Validates the oAuth token.
    # @return [Boolean] true if the token is present and not expired.
    def valid
      !@_o_auth_token.nil? && !token_expired?(@_o_auth_token)
    end

    # Builds and returns an authorization URL.
    # The user is expected to obtain an authorization code from this URL and then call the
    # fetch token function with that authorization code.
    # @param [String] state An opaque state string.
    # @param [Hash] additional_params Any additional query parameters to be added to the URL.
    # @return [String] additional_params The authorization URL.
    def get_authorization_url(state: nil, additional_params: nil)
      auth_url = @_config.get_base_uri
      auth_url += '/authorize'
      query_params = {
        'response_type' => 'code',
        'client_id' => @_o_auth_client_id,
        'redirect_uri' => @_o_auth_client_id
      }
      query_params['scope'] = Array(@_o_auth_scopes).compact.join(' ') if @_o_auth_scopes
      query_params['state'] = state if state
      query_params.merge!(additional_params) if additional_params
      auth_url = APIHelper.append_url_with_query_parameters(auth_url,
                                                            query_params)
      APIHelper.clean_url(auth_url)
    end
  end

  # Data class for PetstoreAuthCredentials.
  class PetstoreAuthCredentials
    attr_reader :o_auth_client_id, :o_auth_redirect_uri, :o_auth_token,
                :o_auth_scopes

    def initialize(o_auth_client_id:, o_auth_redirect_uri:, o_auth_token: nil,
                   o_auth_scopes: nil)
      raise ArgumentError, 'o_auth_client_id cannot be nil' if o_auth_client_id.nil?
      raise ArgumentError, 'o_auth_redirect_uri cannot be nil' if o_auth_redirect_uri.nil?

      @o_auth_client_id = o_auth_client_id
      @o_auth_redirect_uri = o_auth_redirect_uri
      @o_auth_token = o_auth_token
      @o_auth_scopes = o_auth_scopes
    end

    def clone_with(o_auth_client_id: nil, o_auth_redirect_uri: nil,
                   o_auth_token: nil, o_auth_scopes: nil)
      o_auth_client_id ||= self.o_auth_client_id
      o_auth_redirect_uri ||= self.o_auth_redirect_uri
      o_auth_token ||= self.o_auth_token
      o_auth_scopes ||= self.o_auth_scopes

      PetstoreAuthCredentials.new(o_auth_client_id: o_auth_client_id,
                                  o_auth_redirect_uri: o_auth_redirect_uri,
                                  o_auth_token: o_auth_token,
                                  o_auth_scopes: o_auth_scopes)
    end
  end
end
